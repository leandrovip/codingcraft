<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
<# if(!string.IsNullOrEmpty(Model.ModelTypeNamespace)) { #>
using <#= Model.ModelTypeNamespace #>;
<# } #>
<# if(Model.DbContextNamespace != Model.ModelTypeNamespace) { #>
using <#= Model.DbContextNamespace #>;
<# } #>

namespace <#= Model.ControllerNamespace #>
{   
<#  
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized; 
    var modelVariable = modelName.ToLower(); 
    var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey); 
    var routingName = Regex.Replace(Model.ControllerName, "Controller$", "", RegexOptions.IgnoreCase);
    var isObjectContext = ((CodeType)Model.DbContextType).IsAssignableTo<System.Data.Objects.ObjectContext>();
#>
    public class <#= Model.ControllerName #> : Controller
    {
        private <#= ((CodeType)Model.DbContextType).Name #> db = new <#= ((CodeType)Model.DbContextType).Name #>();

        //
        // GET: /<#= routingName #>/
        public ViewResult Index()
        {
<#
    var propertiesToInclude = relatedEntities.Select(relation => relation.LazyLoadingProperty).Where(x => x != null);
    var includeExpressions = isObjectContext 
        ? String.Join("", propertiesToInclude.Select(x => String.Format(".Include(\"{0}\")", x.Name)))
        : String.Join("", propertiesToInclude.Select(x => String.Format(".Include({0} => {0}.{1})", modelVariable, x.Name)));
#>
            return View(db.<#= modelNamePlural #><#= includeExpressions #>.ToList());
        }

        //
        // GET: /<#= routingName #>/Detalhes/5
        public ViewResult Detalhes(<#= primaryKeyProperty.Type.AsString #> id)
        {
            <#= modelName #> <#= modelVariable #> = db.<#= modelNamePlural #>.Single(x => x.<#= primaryKeyProperty.Name #> == id);
            return View(<#= modelVariable #>);
        }

        //
        // GET: /<#= routingName #>/Criar
        public ActionResult Criar()
        {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
            ViewBag.<#= relatedEntity.RelatedEntityPrimaryKeyName#> = new SelectList(db.<#= relatedEntity.RelatedEntityType.Name + 's'#>, "<#= relatedEntity.RelatedEntityPrimaryKeyName#>","DisplayColumn");
<# } #>
            return View();
        } 

        //
        // POST: /<#= routingName #>/Criar
        [HttpPost]
        public ActionResult Criar(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid)
            {
<# if(primaryKeyProperty.Type.AsString == "System.Guid") { #>
                <#= modelVariable #>.<#= primaryKeyProperty.Name #> = Guid.NewGuid();
<# } #>
<# if(isObjectContext) { #>
                db.<#= modelNamePlural #>.AddObject(<#= modelVariable #>);
<# } else { #>
                db.<#= modelNamePlural #>.Add(<#= modelVariable #>);
<# } #>
                db.SaveChanges();
                return RedirectToAction("Index");  
            }

<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
            ViewBag.<#= relatedEntity.RelatedEntityPrimaryKeyName#> = new SelectList(db.<#= relatedEntity.RelatedEntityType.Name + 's'#>, "<#= relatedEntity.RelatedEntityPrimaryKeyName#>","DisplayColumn", <#= modelVariable #>.<#= relatedEntity.RelatedEntityPrimaryKeyName#>);
<# } #>
            return View(<#= modelVariable #>);
        }
        
        //
        // GET: /<#= routingName #>/Editar/5
        public ActionResult Editar(<#= primaryKeyProperty.Type.AsString #> id)
        {
            <#= modelName #> <#= modelVariable #> = db.<#= modelNamePlural #>.Single(x => x.<#= primaryKeyProperty.Name #> == id);
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
            ViewBag.<#= relatedEntity.RelatedEntityPrimaryKeyName#> = new SelectList(db.<#= relatedEntity.RelatedEntityType.Name + 's'#>, "<#= relatedEntity.RelatedEntityPrimaryKeyName#>","DisplayColumn", <#= modelVariable #>.<#= relatedEntity.RelatedEntityPrimaryKeyName#>);
<# } #>
            return View(<#= modelVariable #>);
        }

        //
        // POST: /<#= routingName #>/Editar/5
        [HttpPost]
        public ActionResult Editar(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid)
            {
<# if(isObjectContext) { #>
                db.<#= modelNamePlural #>.Attach(<#= modelVariable #>);
                db.ObjectStateManager.ChangeObjectState(<#= modelVariable #>, EntityState.Modified);
<# } else { #>
                db.Entry(<#= modelVariable #>).State = EntityState.Modified;
<# } #>
                db.SaveChanges();
                return RedirectToAction("Index");
            }
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
            ViewBag.<#= relatedEntity.RelatedEntityPrimaryKeyName#> = new SelectList(db.<#= relatedEntity.RelatedEntityType.Name + 's'#>, "<#= relatedEntity.RelatedEntityPrimaryKeyName#>","DisplayColumn", <#= modelVariable #>.<#= relatedEntity.RelatedEntityPrimaryKeyName#>);
<# } #>
            return View(<#= modelVariable #>);
        }

        //
        // GET: /<#= routingName #>/Excluir/5
        public ActionResult Excluir(<#= primaryKeyProperty.Type.AsString #> id)
        {
            <#= modelName #> <#= modelVariable #> = db.<#= modelNamePlural #>.Single(x => x.<#= primaryKeyProperty.Name #> == id);
            return View(<#= modelVariable #>);
        }

        //
        // POST: /<#= routingName #>/Excluir/5
        [HttpPost, ActionName("Excluir")]
        public ActionResult ConfirmarExclusao(<#= primaryKeyProperty.Type.AsString #> id)
        {
            <#= modelName #> <#= modelVariable #> = db.<#= modelNamePlural #>.Single(x => x.<#= primaryKeyProperty.Name #> == id);
<# if(isObjectContext) { #>
            db.<#= modelNamePlural #>.DeleteObject(<#= modelVariable #>);
<# } else { #>
            db.<#= modelNamePlural #>.Remove(<#= modelVariable #>);
<# } #>
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing) {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}